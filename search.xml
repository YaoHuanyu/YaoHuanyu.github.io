<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>使用并修改三方Repository</title>
    <url>/2021/04/08/%E4%BD%BF%E7%94%A8%E5%B9%B6%E4%BF%AE%E6%94%B9%E4%B8%89%E6%96%B9Repository/</url>
    <content><![CDATA[<p>在日常工作中时不时的会用到别人的东西，自己会进行一些修改，当想提交的时候并不方便。</p>
<span id="more"></span>

<h2 id="普遍的做法"><a href="#普遍的做法" class="headerlink" title="普遍的做法"></a>普遍的做法</h2><p>普遍的做法是GitHub上Fork后，得到自己的Repository，此处以hexo-theme-next为例。</p>
<p>如进入<a href="https://github.com/theme-next/hexo-theme-next">https://github.com/theme-next/hexo-theme-next</a></p>
<p>点击右上角Fork，得到一个自己的Repository</p>
<p><a href="https://github.com/YaoHuanyu/hexo-theme-next.git">https://github.com/YaoHuanyu/hexo-theme-next.git</a></p>
<p>然后git clone 下来之后进行一些修改编辑，命令示例如下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/YaoHuanyu/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure>

<p>然后进入<code>themes/next</code>目录进行一些修改、编辑。再进行普通的提交操作（命令示例如下）即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># themes/next目录下，完成编辑修改后</span></span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is up to <span class="built_in">date</span> with <span class="string">&#x27;origin/master&#x27;</span>.</span><br><span class="line"></span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        modified:   _config.yml</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line"></span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line">$ git commit -m <span class="string">&quot;Had modified something.&quot;</span></span><br><span class="line">[master a9a65d4] Had modified something.</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line"> </span><br><span class="line">$ git push</span><br><span class="line">Enumerating objects: 5, <span class="keyword">done</span>.</span><br><span class="line">Counting objects: 100% (5/5), <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 12 threads</span><br><span class="line">Compressing objects: 100% (3/3), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (3/3), 306 bytes | 306.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 3 (delta 2), reused 0 (delta 0), pack-reused 0</span><br><span class="line">remote: Resolving deltas: 100% (2/2), completed with 2 <span class="built_in">local</span> objects.</span><br><span class="line">To https://github.com/YaoHuanyu/hexo-theme-next.git</span><br><span class="line">   d24c48e..a9a65d4  master -&gt; master</span><br></pre></td></tr></table></figure>

<p>以上配置OVER。但是，涉及一些私有的配置内容提交起来十分不便。而且Fork得来的项目仅仅能够Public，无法作为Private Repository。</p>
<h2 id="复制Repository"><a href="#复制Repository" class="headerlink" title="复制Repository"></a><a href="https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/duplicating-a-repository#mirroring-a-repository-that-contains-git-large-file-storage-objects">复制Repository</a></h2><p>镜像一个Repository（Mirroring a repository）</p>
<p>不采用Fork的方法。通过运行一个特殊的clone命令，然后镜像推送到新的Repository。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在GitHub上创建一个新的Repository。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建存储库的bare clone。</span></span><br><span class="line">$ git <span class="built_in">clone</span> --bare https://github.com/theme-next/hexo-theme-next.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将镜像push到新的repository</span></span><br><span class="line">$ <span class="built_in">cd</span> hexo-theme-next.git</span><br><span class="line"></span><br><span class="line">$ git push --mirror https://github.com/YaoHuanyu/mirror-themes-next.git</span><br><span class="line">Enumerating objects: 12578, <span class="keyword">done</span>.</span><br><span class="line">Counting objects: 100% (12578/12578), <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 12 threads</span><br><span class="line">Compressing objects: 100% (4281/4281), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (12578/12578), 8.02 MiB | 11.27 MiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 12578 (delta 7995), reused 12578 (delta 7995), pack-reused 0</span><br><span class="line">remote: Resolving deltas: 100% (7995/7995), <span class="keyword">done</span>.</span><br><span class="line">To https://github.com/YaoHuanyu/mirror-themes-next.git</span><br><span class="line"> * [new branch]      cdn -&gt; cdn</span><br><span class="line"> * [new branch]      funding -&gt; funding</span><br><span class="line"> * [new branch]      i18n -&gt; i18n</span><br><span class="line"> * [new branch]      imgbot -&gt; imgbot</span><br><span class="line"> * [new branch]      logo -&gt; logo</span><br><span class="line"> * [new branch]      master -&gt; master</span><br><span class="line"> * [new tag]         v6.0.0 -&gt; v6.0.0</span><br><span class="line"> * [new tag]         v6.0.1 -&gt; v6.0.1</span><br><span class="line"> * [new tag]         v6.0.2 -&gt; v6.0.2</span><br><span class="line"> * [new tag]         v6.0.3 -&gt; v6.0.3</span><br><span class="line"> * [new tag]         v6.0.4 -&gt; v6.0.4</span><br><span class="line"> * [new tag]         v6.0.5 -&gt; v6.0.5</span><br><span class="line"> * [new tag]         v6.0.6 -&gt; v6.0.6</span><br><span class="line"> * [new tag]         v6.1.0 -&gt; v6.1.0</span><br><span class="line"> * [new tag]         v6.2.0 -&gt; v6.2.0</span><br><span class="line"> * [new tag]         v6.3.0 -&gt; v6.3.0</span><br><span class="line"> * [new tag]         v6.4.0 -&gt; v6.4.0</span><br><span class="line"> * [new tag]         v6.4.1 -&gt; v6.4.1</span><br><span class="line"> * [new tag]         v6.4.2 -&gt; v6.4.2</span><br><span class="line"> * [new tag]         v6.5.0 -&gt; v6.5.0</span><br><span class="line"> * [new tag]         v6.6.0 -&gt; v6.6.0</span><br><span class="line"> * [new tag]         v6.7.0 -&gt; v6.7.0</span><br><span class="line"> * [new tag]         v7.0.0 -&gt; v7.0.0</span><br><span class="line"> * [new tag]         v7.0.1 -&gt; v7.0.1</span><br><span class="line"> * [new tag]         v7.1.0 -&gt; v7.1.0</span><br><span class="line"> * [new tag]         v7.1.1 -&gt; v7.1.1</span><br><span class="line"> * [new tag]         v7.1.2 -&gt; v7.1.2</span><br><span class="line"> * [new tag]         v7.2.0 -&gt; v7.2.0</span><br><span class="line"> * [new tag]         v7.3.0 -&gt; v7.3.0</span><br><span class="line"> * [new tag]         v7.4.0 -&gt; v7.4.0</span><br><span class="line"> * [new tag]         v7.4.1 -&gt; v7.4.1</span><br><span class="line"> * [new tag]         v7.4.2 -&gt; v7.4.2</span><br><span class="line"> * [new tag]         v7.5.0 -&gt; v7.5.0</span><br><span class="line"> * [new tag]         v7.6.0 -&gt; v7.6.0</span><br><span class="line"> * [new tag]         v7.7.0 -&gt; v7.7.0</span><br><span class="line"> * [new tag]         v7.7.1 -&gt; v7.7.1</span><br><span class="line"> * [new tag]         v7.7.2 -&gt; v7.7.2</span><br><span class="line"> * [new tag]         v7.8.0 -&gt; v7.8.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除临时创建的Repository。</span></span><br><span class="line">$ <span class="built_in">cd</span> ..</span><br><span class="line">$ <span class="built_in">rm</span> -rf hexo-theme-next.git</span><br><span class="line"><span class="comment"># 或windows使用如下命令</span></span><br><span class="line">&gt; <span class="built_in">rmdir</span> /s /q hexo-theme-next.git</span><br></pre></td></tr></table></figure>

<p>设置提交的位置到镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> repository-to-mirror</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote set-url --push origin  https://github.com/YaoHuanyu/mirror-themes-next</span></span><br></pre></td></tr></table></figure>

<p>与bare clone一样，mirror clone包含所有远程分支和标记，但每次获取时都会覆盖所有本地引用，因此它始终与原始存储库相同。设置push的URL可以简化推送到镜像的过程。要更新镜像，获取更新并推送。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git fetch -p origin</span><br><span class="line">$ git push --mirror</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Study</tag>
      </tags>
  </entry>
  <entry>
    <title>文章显示摘要</title>
    <url>/2021/04/08/%E6%96%87%E7%AB%A0%E6%98%BE%E7%A4%BA%E6%91%98%E8%A6%81/</url>
    <content><![CDATA[<p>文章内容中插入一行</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- more --&gt;</span></span><br></pre></td></tr></table></figure>

<p>该标签之上的文本为摘要，<span id="more"></span>需点击阅读全文才能查看剩余的内容。另外也可以在<code>_config.yml</code>配置文件中设置每页显示多少篇文章。</p>
]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>Study</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>自动备份Hexo源文件</title>
    <url>/2021/04/08/%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BDHexo%E6%BA%90%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为了避免Hexo源文件丢失，采用将其自动备份Hexo源文件到Github的方法，在执行hexo d(eploy)命令后自动执行Git命令以push源文件到Github仓库。</p>
<span id="more"></span>

<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>Node.js的事件监听机制监听Hexo的事件。可以用 on 方法监听 Hexo 所发布的事件，也可以使用 emit 方法对 Hexo 发布事件，参考见<a href="https://hexo.io/zh-cn/api/events.html">Hexo文档</a>。</p>
<table>
<thead>
<tr>
<th>Hexo发布的事件</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>deployBefore</td>
<td>在部署完成前发布。</td>
</tr>
<tr>
<td>deployAfter</td>
<td>在部署成功后发布。</td>
</tr>
<tr>
<td>exit</td>
<td>在Hexo 结束前发布。</td>
</tr>
<tr>
<td>generateBefore</td>
<td>在静态文件生成前发布。</td>
</tr>
<tr>
<td>generateAfter</td>
<td>在静态文件生成后发布。</td>
</tr>
<tr>
<td>new</td>
<td>在文章文件建立后发布。该事件返回文章参数。</td>
</tr>
<tr>
<td>processBefore</td>
<td>在处理原始文件前发布。此事件会返回一个地址，代表 Box（Box）的根目录。</td>
</tr>
<tr>
<td>processAfter</td>
<td>在原始文件处理后发布。此事件会返回一个地址，代表 Box（Box）的根目录。</td>
</tr>
<tr>
<td>ready</td>
<td>在初始化完成后发布。</td>
</tr>
</tbody></table>
<p>通过监听Hexo的deployAfter事件，待部署成功后自动运行Git备份命令，从而达到自动备份的目的。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="将Hexo-blog目录加入Git仓库"><a href="#将Hexo-blog目录加入Git仓库" class="headerlink" title="将Hexo blog目录加入Git仓库"></a>将Hexo blog目录加入Git仓库</h3><p>首先需要在Github创建一个新的repository，名字与本地Hexo文件夹同名即可。然后进入本地Hexo blog文件夹，按顺序执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git init</span><br><span class="line">$ git remote add origin git@github.com:yourname/hexo.git</span><br><span class="line">$ git pull origin master</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>每次执行hexo g(enerate)命令时，public&#x2F;、.deploy、*.log文件夹会重写更新，因此需要在.gitignore文件（如果没有，手动创建一个）中写入public&#x2F;、.deploy、*.log以忽略这几个目录，加快备份的速度。</p>
<p>然后再执行以下命令，将文件push到Github：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">&quot;备份hexo blog&quot;</span></span><br><span class="line">$ git push origin master</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这三行命令便是手动推送本地文件到Github的命令，我们接下来要做的是让Node.js监听到Hexo的deployAfter事件后自动执行上述命令。</p>
<h3 id="安装shelljs模块"><a href="#安装shelljs模块" class="headerlink" title="安装shelljs模块"></a>安装shelljs模块</h3><p>命令如下。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install --save shelljs</span></span><br></pre></td></tr></table></figure>

<h3 id="加入自动执行脚本"><a href="#加入自动执行脚本" class="headerlink" title="加入自动执行脚本"></a>加入自动执行脚本</h3><p>在Hexo根目录的scripts文件夹（没有就自己创建一个）下新建一个js文件，文件名随意。然后加入以下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;shelljs/global&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	hexo.<span class="title function_">on</span>(<span class="string">&#x27;deployAfter&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;<span class="comment">//当deploy完成后执行备份</span></span><br><span class="line">		<span class="title function_">run</span>();</span><br><span class="line">	&#125;);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;产生了一个错误&lt;(￣3￣)&gt; !，错误详情为：&quot;</span> + e.<span class="title function_">toString</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">if</span> (!<span class="title function_">which</span>(<span class="string">&#x27;git&#x27;</span>)) &#123;</span><br><span class="line">		<span class="title function_">echo</span>(<span class="string">&#x27;Sorry, this script requires git&#x27;</span>);</span><br><span class="line">		<span class="title function_">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="title function_">echo</span>(<span class="string">&quot;======================Auto Backup Begin===========================&quot;</span>);</span><br><span class="line">		<span class="keyword">if</span> (<span class="title function_">exec</span>(<span class="string">&#x27;git add --all&#x27;</span>).<span class="property">code</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="title function_">echo</span>(<span class="string">&#x27;Error: Git add failed&#x27;</span>);</span><br><span class="line">			<span class="title function_">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">exec</span>(<span class="string">&#x27;git commit -am &quot;Form auto backup script\&#x27;s commit&quot;&#x27;</span>).<span class="property">code</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="title function_">echo</span>(<span class="string">&#x27;Error: Git commit failed&#x27;</span>);</span><br><span class="line">            <span class="title function_">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">exec</span>(<span class="string">&#x27;git push origin master&#x27;</span>).<span class="property">code</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="title function_">echo</span>(<span class="string">&#x27;Error: Git push failed&#x27;</span>);</span><br><span class="line">            <span class="title function_">exit</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">echo</span>(<span class="string">&quot;==================Auto Backup Complete============================&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>每次部署完成，后面会追加类似如下的输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">======================Auto Backup Begin===========================</span><br><span class="line">warning: LF will be replaced by CRLF <span class="keyword">in</span> <span class="built_in">source</span>/_posts/2021-04-08-自动备份Hexo源文件.md.</span><br><span class="line">The file will have its original line endings <span class="keyword">in</span> your working directory</span><br><span class="line">[master 5180657] Form auto backup script<span class="string">&#x27;s commit</span></span><br><span class="line"><span class="string"> 1 file changed, 144 insertions(+)</span></span><br><span class="line"><span class="string"> create mode 100644 &quot;source/_posts/2021-04-08-\350\207\252\345\212\250\345\244\207\344\273\275Hexo\346\272\220\346\226\207\344\273\266.md&quot;</span></span><br><span class="line"><span class="string">To https://github.com/YaoHuanyu/jcxyblog.git</span></span><br><span class="line"><span class="string">   fcd9cbe..5180657  master -&gt; master</span></span><br><span class="line"><span class="string">==================Auto Backup Complete============================</span></span><br></pre></td></tr></table></figure>

<h2 id="Hexo-new-自动打开文档"><a href="#Hexo-new-自动打开文档" class="headerlink" title="Hexo new 自动打开文档"></a>Hexo new 自动打开文档</h2><p>在hexo中，我们常常使用hexo new命令来新建文章，期望每次<code>hexo new &quot;新的文档&quot;</code>时自动使用Markdown编辑器打开。</p>
<p>在scripts文件夹中创建一个js文件，添加以下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> spawn = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="property">exec</span>;</span><br><span class="line"></span><br><span class="line">hexo.<span class="title function_">on</span>(<span class="string">&#x27;new&#x27;</span>, <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">  <span class="title function_">spawn</span>(<span class="string">&#x27;start  &#x27;</span> + data.<span class="property">path</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>保存并退出脚本之后，在命令行中键入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;自动打新文档测试&quot;</span></span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Created: D:\WorkSpace\Sty_C\jcxyblog\<span class="built_in">source</span>\_posts\2021-04-08-自动打新文档测试.md</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>打包python应用</title>
    <url>/2021/04/12/%E6%89%93%E5%8C%85python%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<p>设计，构建，测试以及维护一个应用要做很多的工作。可重用性是Python的生存方式，据此该如何打包自己的应用并发布给其他人安装使用呢？</p>
<span id="more"></span>

<p>自己的应用目录结构如下。目录<code>project</code>现在可以被拷贝至一个新的目录，且立刻被复用。但为了方便他人安装，我们需要打包这个应用。</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">.\dirname</span><br><span class="line">|   src</span><br><span class="line">    |  .\projectname</span><br><span class="line">        │  __init__.<span class="keyword">py</span></span><br><span class="line">        │</span><br><span class="line">        ├─bin</span><br><span class="line">        │      start.<span class="keyword">py</span></span><br><span class="line">        │      __init__.<span class="keyword">py</span></span><br><span class="line">        │</span><br><span class="line">        ├─<span class="keyword">conf</span></span><br><span class="line">        │      config</span><br><span class="line">        │      __init__.<span class="keyword">py</span></span><br><span class="line">        │</span><br><span class="line">        ├─core</span><br><span class="line">        │      auth.<span class="keyword">py</span></span><br><span class="line">        │      main.<span class="keyword">py</span></span><br><span class="line">        │      __init__.<span class="keyword">py</span></span><br><span class="line">        │</span><br><span class="line">        ├─db</span><br><span class="line">        │      __init__.<span class="keyword">py</span></span><br><span class="line">        │</span><br><span class="line">        ├─lib</span><br><span class="line">        │      __init__.<span class="keyword">py</span></span><br><span class="line">        │</span><br><span class="line">        └─<span class="built_in">log</span></span><br><span class="line">                __init__.<span class="keyword">py</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="安装必须的环境"><a href="#安装必须的环境" class="headerlink" title="安装必须的环境"></a>安装必须的环境</h2><p>有许多工具可以完成这项任务，如1998年首次添加到Python标准库的原始构建和分发系统<a href="https://docs.python.org/zh-cn/3.6/library/distutils.html#module-distutils">distutils</a>，虽然直接使用<a href="https://docs.python.org/zh-cn/3.6/library/distutils.html#module-distutils">distutils</a>正在淘汰，但它仍然为当前的打包和分发基础架构奠定了基础；<a href="https://setuptools.readthedocs.io/en/latest/">setuptools</a>在很大程度上是作为<a href="https://docs.python.org/zh-cn/3.6/library/distutils.html#module-distutils">distutils</a>的取代者，2004年首次发布，目前它被推荐来替代<a href="https://docs.python.org/zh-cn/3.6/library/distutils.html#module-distutils">distutils</a>。</p>
<p>本文使用<a href="https://setuptools.readthedocs.io/en/latest/">setuptools</a>来打包应用。安装命令如下。</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装最新版本setuptools</span></span><br><span class="line">$ pip install <span class="comment">--upgrade setuptools</span></span><br></pre></td></tr></table></figure>

<h2 id="打包应用"><a href="#打包应用" class="headerlink" title="打包应用"></a>打包应用</h2><p>Python以一种特殊的格式组织打包应用，以便于方便安装和使用。基本流程如下。</p>
<ol>
<li><p>在项目目录外创建一个文件夹，用于存放项目。当为自己的包选一个名字要避免包名冲突。此处以<code>projectname</code>为例。</p>
</li>
<li><p>将<code>project</code>目录移到<code>projectname</code>目录。</p>
</li>
<li><p>创建<code>README.md</code>文件。</p>
</li>
<li><p>创建一个LICENSE文件。</p>
</li>
<li><p>创建<code>setup.cfg</code>和<code>setup.py</code>文件。</p>
<p>详细说明如何构建和安装应用程序，对这两个文件详细解释可参考[setuptools文档](<a href="https://setuptools.readthedocs.io/en/latest/">setuptools documentation</a>)。</p>
<p>创建pyproject.toml，示例如下。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[build-system]</span></span><br><span class="line"><span class="attr">requires</span> = [</span><br><span class="line">    <span class="string">&quot;setuptools&quot;</span>,</span><br><span class="line">    <span class="string">&quot;wheel&quot;</span></span><br><span class="line">]</span><br><span class="line"><span class="attr">build-backend</span> = <span class="string">&quot;setuptools.build_meta&quot;</span></span><br></pre></td></tr></table></figure>

<p>setup.cfg示例如下。</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">[metadata]</span><br><span class="line"><span class="comment"># replace with your username:</span></span><br><span class="line">name = projectname</span><br><span class="line">version = 0.0.1</span><br><span class="line">author = Yaohuanyu</span><br><span class="line">author_email = yaohuanyuchn@gmail.com</span><br><span class="line">description = A small example package</span><br><span class="line">long_description = file: README.md</span><br><span class="line">long_description_content_type = text/markdown</span><br><span class="line">url =  http://blog.jcxy.ml/</span><br><span class="line">project_urls =</span><br><span class="line">    Bug Tracker =  http://blog.jcxy.ml/</span><br><span class="line">classifiers =</span><br><span class="line">    Programming Language :: Python :: 3</span><br><span class="line">    License :: OSI Approved :: MIT License</span><br><span class="line">    Operating System :: OS Independent</span><br><span class="line"></span><br><span class="line">[options]</span><br><span class="line">; package_dir包名称和目录的映射。空包名表示为根目录</span><br><span class="line">package_dir =</span><br><span class="line">    = src</span><br><span class="line">include_package_data = true</span><br><span class="line">packages = find:</span><br><span class="line">python_requires = &gt;=3.6</span><br><span class="line"></span><br><span class="line">[options.packages.find]</span><br><span class="line">where = src</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>setup.py</code>（以前是必须的，现代<code>setuptools</code><strong>可以省略</strong>）为了兼容，增加此文件。示例如下。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">from setuptools import setup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">setup</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个名为<code>MANIFEST.in</code>的文件以包含资源文件。</p>
<p>示例如下。</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span> *.rst *.txt *.md LICENSE VERSION *.pyx</span><br><span class="line">recursive-<span class="keyword">include</span> src<span class="regexp">/projectname/</span>bin *.py</span><br><span class="line">recursive-<span class="keyword">include</span> src<span class="regexp">/projectname/</span>conf *.py</span><br><span class="line">recursive-<span class="keyword">include</span> src<span class="regexp">/projectname/</span>core *.py</span><br><span class="line">recursive-<span class="keyword">include</span> src<span class="regexp">/projectname/</span>db *.py</span><br><span class="line">recursive-<span class="keyword">include</span> src<span class="regexp">/projectname/</span>lib *.py</span><br><span class="line">recursive-<span class="keyword">include</span> src<span class="regexp">/projectname/</span>log *.py</span><br><span class="line">recursive-<span class="keyword">include</span> docs *</span><br><span class="line">recursive-<span class="keyword">exclude</span> * __pycache__</span><br></pre></td></tr></table></figure>
</li>
<li><p>构建应用包。</p>
<p>采用如下命令构建应用包。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># *.tar.gz</span></span><br><span class="line">$ python setup.py sdist</span><br><span class="line"></span><br><span class="line"><span class="comment"># *.wheel</span></span><br><span class="line">$ python setup.py bdist_wheel</span><br></pre></td></tr></table></figure>

<p>会在<code>Project/dist</code>目录中创建一个名为<code>projectname-0.0.1.tar.gz</code>的文件。</p>
</li>
</ol>
<h2 id="使用自己的包"><a href="#使用自己的包" class="headerlink" title="使用自己的包"></a>使用自己的包</h2><p>在虚环境下通过<code>pip install</code>命令安装自己的包。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">$ pip <span class="keyword">install</span> projectname-<span class="number">0.0</span>.<span class="number">1</span>.tar.gz</span><br></pre></td></tr></table></figure>

<p>通过pip卸载包</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>pip uninstall projectname</span><br></pre></td></tr></table></figure>

<h2 id="发布自己的应用"><a href="#发布自己的应用" class="headerlink" title="发布自己的应用"></a>发布自己的应用</h2><p>当完成打包和测试，准备分享可以这样做。</p>
<ul>
<li>通过邮件将打好的包发送给朋友。</li>
<li>将这个包上传至自己的网站。</li>
<li>发布到公共仓库，如<a href="https://docs.djangoproject.com/zh-hans/2.2/intro/reusable-apps/#the-python-package-index-pypi">PyPI</a>。可以参考<a href="https://packaging.python.org/tutorials/packaging-projects/#uploading-the-distribution-archives">教程</a>。</li>
</ul>
]]></content>
      <categories>
        <category>Technology</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Study</tag>
        <tag>Technology</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 16.04 python虚环境管理（pyenv）--应用</title>
    <url>/2021/04/28/Ubuntu-16-04-python%E8%99%9A%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86%EF%BC%88pyenv%EF%BC%89-%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<p>根据<a href="http://blog.jcxy.ml/2021/04/28/Ubuntu-16-04-python%E8%99%9A%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86%EF%BC%88pyenv%EF%BC%89%E4%B9%8B%E5%AE%89%E8%A3%85/">上一篇安装pyenv</a>之后，应用起来就很easy了。本文将Pyenv应用予以备忘。</p>
<span id="more"></span>

<h2 id="Pyenv生效原理"><a href="#Pyenv生效原理" class="headerlink" title="Pyenv生效原理"></a>Pyenv生效原理</h2><p>根据操作系统PATH的路径中从左至右依次寻找执行的命令。在PATH最前面插入一个$(pyenv root)&#x2F;shims目录，也就是</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$HOME</span>/.pyenv/bin:<span class="variable">$PATH</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>$(pyenv root)&#x2F;shims目录里包含名称为python以及pip等可执行脚本文件。</p>
<p>当用户执行python或pip命令时，根据查找优先级，系统会优先执行shims目录中的同名脚本。</p>
<p>通过这些脚本，来切换至我们所需的Python版本。</p>
<h2 id="基本使用方法"><a href="#基本使用方法" class="headerlink" title="基本使用方法"></a>基本使用方法</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv &lt;命令&gt; [&lt;参数&gt;]</span><br></pre></td></tr></table></figure>

<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ol>
<li><h3 id="查看可安装的版本"><a href="#查看可安装的版本" class="headerlink" title="查看可安装的版本"></a>查看可安装的版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pyenv install -l</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="查看当前所有环境"><a href="#查看当前所有环境" class="headerlink" title="查看当前所有环境"></a>查看当前所有环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pyenv versions</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="安装其他python版本"><a href="#安装其他python版本" class="headerlink" title="安装其他python版本"></a>安装其他python版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pyenv install 版本号</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="卸载指定python版本"><a href="#卸载指定python版本" class="headerlink" title="卸载指定python版本"></a>卸载指定python版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pyenv unstall 版本号</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="创建虚环境"><a href="#创建虚环境" class="headerlink" title="创建虚环境"></a>创建虚环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pyenv virtualenv [-f|--force] [VIRTUALENV_OPTIONS] [version] &lt;virtualenv-name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例如：</span></span><br><span class="line">$ pyenv virtualenv 3.6.8 venv</span><br><span class="line"><span class="comment"># 创建python版本为3.6.8的虚环境，虚环境名称为venv</span></span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="激活虚环境"><a href="#激活虚环境" class="headerlink" title="激活虚环境"></a>激活虚环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pyenv activate &lt;virtualenv&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例如：</span></span><br><span class="line">$ pyenv activate venv</span><br><span class="line"><span class="comment">#或者类似Anaconda：</span></span><br><span class="line">$ <span class="built_in">source</span> activate venv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将venv设置为全局环境：</span></span><br><span class="line">$ pyenv global venv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将venv设置为local环境</span></span><br><span class="line">$ pyenv <span class="built_in">local</span> venv</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="退出虚环境"><a href="#退出虚环境" class="headerlink" title="退出虚环境"></a>退出虚环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pyenv deactivate</span><br><span class="line"><span class="comment"># 或者：</span></span><br><span class="line">$ <span class="built_in">source</span> deactivate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复系统默认全局环境：</span></span><br><span class="line">$ pyenv global system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复local环境：</span></span><br><span class="line">$ pyenv <span class="built_in">local</span> system</span><br></pre></td></tr></table></figure>
</li>
<li><h3 id="删除虚环境"><a href="#删除虚环境" class="headerlink" title="删除虚环境"></a>删除虚环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pyenv uninstall [-f|--force] &lt;version&gt;</span><br><span class="line"><span class="comment"># 例如：</span></span><br><span class="line">$ pyenv uninstall venv</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="附录：pyenv命令"><a href="#附录：pyenv命令" class="headerlink" title="附录：pyenv命令"></a>附录：pyenv命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">activate    激活虚环境</span><br><span class="line">commands    列举所有可用pyenv命令</span><br><span class="line">deactivate  停用虚环境</span><br><span class="line">doctor      验证pyenv安装和开发工具来构建python。</span><br><span class="line"><span class="built_in">exec</span>        使用选定的Python version运行可执行文件</span><br><span class="line">global      全局设置或显示全局的Python version</span><br><span class="line"><span class="built_in">help</span>        显示一个命令的帮助信息</span><br><span class="line">hooks       列出给定pyenv命令的hook脚本</span><br><span class="line">init        配置pyenv的shell环境</span><br><span class="line">install     使用Python-Build安装安装Python version</span><br><span class="line"><span class="built_in">local</span>       设置或显示<span class="built_in">local</span>应用特定的python version</span><br><span class="line">prefix      显示Python version的前缀</span><br><span class="line"><span class="built_in">rehash</span>      Rehash pyenv shims(安装可执行文件后运行)</span><br><span class="line">root        显示versions和shims所在的根目录</span><br><span class="line">shell       设置或显示shell指定的Python version</span><br><span class="line">shims       列出存在的shims</span><br><span class="line">uninstall   卸载指定的python version</span><br><span class="line">version     显示当前的python version和origin</span><br><span class="line">--version   显示pyenv的版本</span><br><span class="line">version-file    设置当前pyenv version的文件</span><br><span class="line">version-name    显示当前的Python version</span><br><span class="line">version-origin  说明如何设置当前的Python version</span><br><span class="line">versions        列出pyenv可获取的所有Python versions</span><br><span class="line">virtualenv      用pyenv-virtualenv插件创建一个Python虚环境</span><br><span class="line">virtualenv-delete   卸载一个指定的Python虚环境</span><br><span class="line">virtualenv-init     配置pyenv-virtualenv的shell环境</span><br><span class="line">virtualenv-prefix   显示Python虚环境的前缀路径</span><br><span class="line">virtualenvs         列出在 <span class="string">&#x27;$PYENV_ROOT/versions/*&#x27;</span>所有的Python虚环境</span><br><span class="line"><span class="built_in">whence</span>      列出包含给定可执行文件的所有Python versions</span><br><span class="line"><span class="built_in">which</span>       显示一个执行程序的完整路径</span><br></pre></td></tr></table></figure>

<p>总体使用和anaconda的用法很相似，也很简便。</p>
]]></content>
      <categories>
        <category>Ubuntu</category>
        <category>Python</category>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>Study</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>TensorFlow_V2兼容V1</title>
    <url>/2021/07/16/TensorFlow-V2%E5%85%BC%E5%AE%B9V1/</url>
    <content><![CDATA[<p>使用<code>pip install tf-nightly-gpu</code>无脑将TensorFlow升级到2.7后，之前的项目中有用1.14版本的TensorFlow出现兼容的问题，可通过如下几行进行适配。</p>
<span id="more"></span>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow</span><br><span class="line"><span class="keyword">if</span> tensorflow.__version__.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>] == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> tensorflow.compat.v1 <span class="keyword">as</span> tf</span><br><span class="line">    tf.disable_v2_behavior()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Technology</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Study</tag>
        <tag>Tensorflow</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 16.04 python虚环境管理（pyenv）之安装</title>
    <url>/2021/04/28/Ubuntu-16-04-python%E8%99%9A%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86%EF%BC%88pyenv%EF%BC%89%E4%B9%8B%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>windows下一般常用Conda管理虚环境，简单方便。偶然在Ubuntu部署环境，感觉Anaconda太过臃肿，后来发现pyenv用起来也很方便，于是简要摘记。</p>
<span id="more"></span>

<ol>
<li><p>安装依赖及一些工具包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install -y git</span><br><span class="line">$ sudo apt-get install -y build-essential libbz2-dev libssl-dev libreadline-dev libffi-dev libsqlite3-dev tk-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># optional scientific package headers (for Numpy, Matplotlib, SciPy, etc.)</span></span><br><span class="line">$ sudo apt-get install -y libpng-dev libfreetype6-dev </span><br></pre></td></tr></table></figure>
</li>
<li><p>使用pyenv安装脚本进行安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash</span><br></pre></td></tr></table></figure>
</li>
<li><p>增加如下初始化语句到~&#x2F;.bashrc</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$HOME</span>/.pyenv/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line">$ <span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(pyenv init -)</span>&quot;</span></span><br><span class="line">$ <span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(pyenv virtualenv-init -)</span>&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>重新载入profile</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></li>
</ol>
<p>安装操作完成。O(∩_∩)O~</p>
]]></content>
      <categories>
        <category>Ubuntu</category>
        <category>Technology</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Study</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>创建个人博客</title>
    <url>/2021/06/26/%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>个人博客的创建过程源自于一次偶然的兴趣，仅仅是想找个地儿让自己有个诉说的对象。不至于整天埋头工作，让自己丧失了一些激情，太过无聊。</p>
<p>这里简要记录一下自己当时部署这样一个博客的主要命令及过程。</p>
<span id="more"></span>

<h2 id="Hexo-GitHub-Page"><a href="#Hexo-GitHub-Page" class="headerlink" title="Hexo + GitHub Page"></a>Hexo + GitHub Page</h2><p>依赖项 <a href="https://npm.taobao.org/mirrors/node/v15.9.0/">Node.js</a> 、Git</p>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建并初始化项目</span></span><br><span class="line">$ hexo init jcxyblog</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到项目</span></span><br><span class="line">$ <span class="built_in">cd</span> jcxyblog</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>

<h3 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h3><p>生成静态网站，并在本地预览。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成静态文件</span></span><br><span class="line"><span class="comment"># 将网站资源放在public目录下，相当于执行了hexo generate</span></span><br><span class="line">$ hexo g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看目录结构</span></span><br><span class="line"><span class="comment"># ubuntu</span></span><br><span class="line">$ tree -L 1</span><br><span class="line"><span class="comment"># windows tree默认仅显示文件夹，不显示文件；/f显示所有文件夹及文件</span></span><br><span class="line">&gt; tree /f</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务，本地预览，相当于执行了hexo server</span></span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>内容</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>db.json</td>
<td></td>
</tr>
<tr>
<td>node_modules</td>
<td></td>
</tr>
<tr>
<td>package-lock.json</td>
<td></td>
</tr>
<tr>
<td>package.json</td>
<td>应用程序信息</td>
</tr>
<tr>
<td>public</td>
<td>静态站点存放在这</td>
</tr>
<tr>
<td>scaffolds</td>
<td>模板文件夹，新建文章时使用此文件夹下的文件作为模板</td>
</tr>
<tr>
<td>source</td>
<td>存放用户资源的地方</td>
</tr>
<tr>
<td>themes</td>
<td>主题</td>
</tr>
<tr>
<td>_config.landscape.yml</td>
<td></td>
</tr>
<tr>
<td>_config.yml</td>
<td>网站配置文件</td>
</tr>
</tbody></table>
<h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><ol>
<li><p>新建一篇名为test的文章</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<p>新建文章默认会放到source&#x2F;_posts&#x2F;目录下，文件扩展名为.md，新建时只需指定文件名即可。</p>
</li>
<li><p>查看并编辑test.md后保存</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim <span class="built_in">source</span>/_posts/test.md</span><br><span class="line">&gt; notepad <span class="built_in">source</span>/_posts/test.md</span><br></pre></td></tr></table></figure>
</li>
<li><p>本地查看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成静态文件</span></span><br><span class="line">$ hexo g</span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h2><h3 id="创建GitHub-Pages"><a href="#创建GitHub-Pages" class="headerlink" title="创建GitHub Pages"></a>创建GitHub Pages</h3><ol>
<li><p>在GitHub上创建一个仓库（Repository）</p>
<p>打开 <a href="https://github.com/new%EF%BC%8C%E5%9C%A8%60Repository">https://github.com/new，在`Repository</a> name<code>输入</code>username.github.io<code>（其中</code>username<code>**必须**是自己的GitHub用户名），然后点击</code>Create repository&#96;创建一个新仓库。</p>
</li>
<li><p>把Hexo生成的静态网站推送到GitHub上。</p>
<ol>
<li>安装 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a>.</li>
</ol>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git <span class="comment">--save</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>编辑**_config.yml** （示例如下）:</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&lt;repository</span> <span class="string">url&gt;</span> <span class="comment"># https://github.com/YaoHuanyu/YaoHuanyu.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> [<span class="string">branch</span>] <span class="comment"># master</span></span><br><span class="line">  <span class="attr">message:</span> [<span class="string">message</span>]</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">Option</th>
<th align="left">Description</th>
<th align="left">Default</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>repo</code></td>
<td align="left">目标仓库的URL</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>branch</code></td>
<td align="left">Branch name.</td>
<td align="left"><code>gh-pages</code> (GitHub) <code>coding-pages</code> (Coding.net) <code>master</code> (others)</td>
</tr>
<tr>
<td align="left"><code>message</code></td>
<td align="left">自定义提交消息。</td>
<td align="left"><code>Site updated: &#123;&#123; now('YYYY-MM-DD HH:mm:ss') &#125;&#125;</code></td>
</tr>
<tr>
<td align="left"><code>token</code></td>
<td align="left">用于向repo进行身份验证的可选token值。用<code>$</code>前缀从环境变量中获取token。</td>
<td align="left"></td>
</tr>
</tbody></table>
<ol start="3">
<li><p>部署网站 <code>hexo clean &amp;&amp; hexo deploy</code>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 执行部署命令</span></span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>

<ul>
<li>除非使用令牌或ssh密钥进行身份验证，否则将提示您输入目标存储库的用户名和密码。</li>
<li>hexo-deployer-git不存储您的用户名和密码。使用<a href="https://git-scm.com/docs/git-credential-cache">git-credential-cache</a>暂时保存。</li>
</ul>
</li>
<li><p>导航到repository settings并将”Pages”分支更改为<code>gh-pages</code>（或在配置中指定的分支）。部署的站点应该位于”Pages”设置中显示的链接上。</p>
</li>
</ol>
<p>Hexo生成的静态网站就被推送到GitHub新建的仓库中。<a href="https://yaohuanyu.github.io可查看效果./">https://yaohuanyu.github.io可查看效果。</a></p>
</li>
</ol>
<h2 id="绑定自己的域名"><a href="#绑定自己的域名" class="headerlink" title="绑定自己的域名"></a>绑定自己的域名</h2><h3 id="添加域名解析"><a href="#添加域名解析" class="headerlink" title="添加域名解析"></a>添加域名解析</h3><p>GitHub设置或自己生成CNAME</p>
<p>GitHub -&gt; Repository -&gt; Settings -&gt; GitHub Pages -&gt; Custom domain</p>
<p>或者切换到source目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="built_in">source</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建CNAME文件</span></span><br><span class="line">$ <span class="built_in">touch</span> CNAME</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑CNAME，添加域名，如blog.jcxy.ml</span></span><br><span class="line">$ <span class="built_in">cat</span> CNAME</span><br><span class="line">blog.jcxy.ml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回项目根目录</span></span><br><span class="line">$ <span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成网站</span></span><br><span class="line">$ hexo g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署到GitHub</span></span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>

<p>   域名解析页添加记录</p>
<table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">名称</th>
<th align="left">内容</th>
<th align="left">TTL</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>CNAME</strong></td>
<td align="left">blog</td>
<td align="left">yaohuanyu.github.io</td>
<td align="left">自动</td>
</tr>
</tbody></table>
<h3 id="使用NexT主题"><a href="#使用NexT主题" class="headerlink" title="使用NexT主题"></a>使用NexT主题</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> jcxyblog</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开 _config.yml，配置theme:next</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地预览</span></span><br><span class="line"><span class="comment"># 生成静态网站</span></span><br><span class="line">$ hexo g --debug</span><br><span class="line"><span class="comment"># 开启debug模式</span></span><br><span class="line">$ hexo s --debug</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预览若无问题，使用hexo d直接部署到GitHub即可。</span></span><br></pre></td></tr></table></figure>



<h3 id="更新主题"><a href="#更新主题" class="headerlink" title="更新主题"></a>更新主题</h3><p>更新主题命令如下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> themes/next</span><br><span class="line">$ git pull</span><br></pre></td></tr></table></figure>

<h3 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h3><p>详细应用参考<a href="http://theme-next.iissnan.com/getting-started.html">配置文档</a></p>
<h3 id="新建页面"><a href="#新建页面" class="headerlink" title="新建页面"></a>新建页面</h3><ol>
<li><p>新增导航栏页面</p>
<p>在主题配置文件themes&#x2F;next&#x2F;_config.yml中搜索menu，在menu中配置对应的导航栏选项，示例如下。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-th</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br></pre></td></tr></table></figure>

<p>与英文对应中文在themes&#x2F;next&#x2F;languages&#x2F;zh-CN.yml中进行匹配。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">首页</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">归档</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">分类</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">标签</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">关于</span></span><br><span class="line">  <span class="attr">search:</span> <span class="string">搜索</span></span><br><span class="line">  <span class="attr">schedule:</span> <span class="string">日程表</span></span><br><span class="line">  <span class="attr">sitemap:</span> <span class="string">站点地图</span></span><br><span class="line">  <span class="attr">commonweal:</span> <span class="string">公益</span> <span class="number">404</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>新建页面</p>
<p>默认情况下，导航栏上的标签（tags）、关于（about）、分类（categories)等页面是没有的。需要在项目根目录下执行以下命令。否则会<code>Cannot GET /categories/</code> <code>Cannot GET /tags/</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建【分类】页面</span></span><br><span class="line">$ hexo new page categories</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Created: ...\jcxyblog\<span class="built_in">source</span>\categories\index.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建【标签】页面</span></span><br><span class="line">$ hexo new page tags</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Created: ...\jcxyblog\<span class="built_in">source</span>\tags\index.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建【关于】页面</span></span><br><span class="line">$ hexo new page about</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Created: ...\jcxyblog\<span class="built_in">source</span>\about\index.md</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>禁用评论</p>
<p>若使用评论，则默认所有页面都会开启评论模块，有些页面不需要评论，将comments设为false即可禁用，示例如下。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">页面名字</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2021-04-06 23:08:47</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>指定页面类型</p>
<p>type字段用来指定页面类型，示例如下。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2021-04-06 19:10:02</span></span><br><span class="line"><span class="comment"># 增加type属性</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;tags&quot;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="hexo-搜索功能"><a href="#hexo-搜索功能" class="headerlink" title="hexo 搜索功能"></a>hexo 搜索功能</h2><p>安装插件</p>
   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<p>修改站点配置文件</p>
   <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br><span class="line">   </span><br></pre></td></tr></table></figure>


<p>   修改 主题配置文件</p>
   <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">   </span><br></pre></td></tr></table></figure>

<h2 id="开始写作"><a href="#开始写作" class="headerlink" title="开始写作"></a>开始写作</h2><h3 id="创建文章并熟悉布局"><a href="#创建文章并熟悉布局" class="headerlink" title="创建文章并熟悉布局"></a>创建文章并熟悉布局</h3><ol>
<li><p>新建一篇文章</p>
<p>新建文章命令如下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new [布局] &lt;文章标题&gt;</span><br></pre></td></tr></table></figure>

<p>例如，新建一篇文章”我的博客“，示例如下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new 我的博客</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Created: \jcxyblog\<span class="built_in">source</span>\_posts\我的博客.md</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cat</span> <span class="built_in">source</span>/_posts/我的博客.md</span><br><span class="line">---</span><br><span class="line">title: 我的博客</span><br><span class="line"><span class="built_in">date</span>: 2021-04-06 23:22:24</span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>默认文章文件名不带有创建日期，想在文件名之前带上创建日期，可做如下设置。</p>
<p>打开网站配置文件，搜索<code>newpostname</code>，将其设为new_post_name: :year-:month-:day-:tiltle.md</p>
<p>再次新建时，则变成如下格式。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new 测试文档</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Created: jcxyblog\<span class="built_in">source</span>\_posts\2021-04-06-测试文档.md</span><br></pre></td></tr></table></figure>

<p>Hexo支持三种布局，可将其理解为不同类型的Markdown文件，具体如下。</p>
<table>
<thead>
<tr>
<th align="center">布局</th>
<th align="center">说明</th>
<th align="center">存放路径</th>
</tr>
</thead>
<tbody><tr>
<td align="center">文章</td>
<td align="center">用于发布的文章</td>
<td align="center">source&#x2F;_posts</td>
</tr>
<tr>
<td align="center">页面</td>
<td align="center">导航栏上的项目</td>
<td align="center">source</td>
</tr>
<tr>
<td align="center">草稿</td>
<td align="center">还未完成的草稿</td>
<td align="center">source&#x2F;_drafts</td>
</tr>
</tbody></table>
</li>
<li><p>新建草稿</p>
<p>新建草稿命令如下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new draft 草稿文档</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Created: d:\WorkSpace\Sty_C\jcxyblog\<span class="built_in">source</span>\_drafts\草稿文档.md</span><br><span class="line">$ <span class="built_in">cat</span> <span class="built_in">source</span>\_drafts\草稿文档.md</span><br><span class="line">---</span><br><span class="line">title: 草稿文档</span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>草稿没有创建日期。</p>
<p>草稿正式发布，使用publish，命令如下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo publish _drafts 草稿文档</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="评论设置"><a href="#评论设置" class="headerlink" title="评论设置"></a>评论设置</h2><h3 id="开启评论"><a href="#开启评论" class="headerlink" title="开启评论"></a>开启评论</h3><ol>
<li><p>然后前往<a href="https://leancloud.cn/">leancloud</a>注册账号，随意注册一个应用</p>
</li>
<li><p>打开设置应用Keys，获取appid和appkey。</p>
</li>
<li><p>next文件夹的_config.yml文件，找到valine字段</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Valine</span></span><br><span class="line"><span class="comment"># For more information: https://valine.js.org, https://github.com/xCss/Valine</span></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">appid:</span> <span class="comment"># 填入自己的leancloud应用appid</span></span><br><span class="line">  <span class="attr">appkey:</span> <span class="comment"># 填入自己的leancloud应用appkey</span></span><br><span class="line">  <span class="attr">notify:</span> <span class="literal">false</span> <span class="comment"># Mail notifier</span></span><br><span class="line">  <span class="attr">verify:</span> <span class="literal">false</span> <span class="comment"># Verification code</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">Just</span> <span class="string">go</span> <span class="string">go</span> <span class="comment"># Comment box placeholder</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">mm</span> <span class="comment"># Gravatar style</span></span><br><span class="line">  <span class="attr">guest_info:</span> <span class="string">nick,mail,link</span> <span class="comment"># Custom comment header</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># Pagination size</span></span><br><span class="line">  <span class="attr">language:</span>  <span class="comment"># Language, available values: en, zh-cn</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">false</span> <span class="comment"># Article reading statistic</span></span><br><span class="line">  <span class="attr">comment_count:</span> <span class="literal">true</span> <span class="comment"># If false, comment count will only be displayed in post page, not in home page</span></span><br><span class="line">  <span class="attr">recordIP:</span> <span class="literal">false</span> <span class="comment"># Whether to record the commenter IP</span></span><br><span class="line">  <span class="attr">serverURLs:</span> <span class="comment"># When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)</span></span><br><span class="line">  <span class="comment">#post_meta_order: 0</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>以上。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Diary</category>
        <category>PlayStation</category>
      </categories>
      <tags>
        <tag>Study</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows远程桌面端口修改</title>
    <url>/2021/04/28/Windows%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E7%AB%AF%E5%8F%A3%E4%BF%AE%E6%94%B9/</url>
    <content><![CDATA[<p>Windows远程桌面端口3389，如果想进行修改可按以下方法进行。</p>
<span id="more"></span>

<ol>
<li><p>打开注册表</p>
<p>运行-&gt;regedit</p>
</li>
<li><p>找到如下字段</p>
</li>
<li><p>计算机\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp</p>
</li>
<li><p>找到<code>protNumber</code>项，选择十进制进行修改成自己期望的端口号即可，需满足端口号要求。</p>
<p>默认&#96;portNumber 3389</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu部署Samba服务</title>
    <url>/2021/08/05/Ubuntu%E9%83%A8%E7%BD%B2Samba%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<p>Ubuntu服务器装了新硬盘后，共享个文件夹，方便其他机器访问传输数据。</p>
<span id="more"></span>

<ol>
<li><p>运行samba</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ samba</span><br><span class="line">[2021/08/05 08:25:00.658854,  0] ../lib/util/debug.c:947(reopen_logs_internal)</span><br><span class="line">  Unable to open new <span class="built_in">log</span> file <span class="string">&#x27;/var/log/samba/log.%m&#x27;</span>: Permission denied</span><br><span class="line">[2021/08/05 08:25:00.658888,  0] ../source4/smbd/server.c:372(binary_smbd_main)</span><br><span class="line">  samba version 4.3.11-Ubuntu started.</span><br><span class="line">  Copyright Andrew Tridgell and the Samba Team 1992-2015</span><br></pre></td></tr></table></figure>
</li>
<li><p>若没有samba服务需要安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install samba</span><br></pre></td></tr></table></figure>
</li>
<li><p>备份及修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 备份</span></span><br><span class="line">$ sudo <span class="built_in">cp</span> /etc/samba/smb.conf  /etc/samba/smb.conf.bak</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line">$ sudo vi /etc/samba/smb.conf</span><br><span class="line"><span class="comment"># 增加如下内容</span></span><br><span class="line">[sharename] <span class="comment"># 共享文件夹名字</span></span><br><span class="line">    comment = comment <span class="comment"># 备注</span></span><br><span class="line">    path = /home/xxx/xxx <span class="comment"># 路径</span></span><br><span class="line">    public = <span class="built_in">yes</span> </span><br><span class="line">    browseable = <span class="built_in">yes</span> </span><br><span class="line">    public = <span class="built_in">yes</span> </span><br><span class="line">    writeable = <span class="built_in">yes</span> </span><br><span class="line">    <span class="built_in">read</span> only = no</span><br><span class="line">    create mask = 0777</span><br><span class="line">    directory mask = 0777 </span><br><span class="line">    <span class="comment">#force user = nobody</span></span><br><span class="line">    <span class="comment">#force group = nogroup</span></span><br><span class="line">    available = <span class="built_in">yes</span> </span><br></pre></td></tr></table></figure>
</li>
<li><p>重启服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo service smbd restart</span><br></pre></td></tr></table></figure>
</li>
<li><p>此时文件夹访问的话权限有问题，chmod改下权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo <span class="built_in">chmod</span> 777 /home/xxx/xxx</span><br></pre></td></tr></table></figure></li>
</ol>
<p>以上，完工~！共享起来使用还是很方便的，另外内网穿透一下外网也可以访问呦^_^</p>
]]></content>
      <categories>
        <category>Ubuntu</category>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Environment</tag>
      </tags>
  </entry>
  <entry>
    <title>PyInstaller打包exe</title>
    <url>/2022/01/14/PyInstaller%E6%89%93%E5%8C%85exe/</url>
    <content><![CDATA[<p>python打包*.py为exe常用PyInstaller。安装方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install pyinstaller</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>@<a href="%E4%B8%BB%E8%A6%81%E5%86%85%E5%AE%B9">TOC</a></p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>基本命令如下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyinstaller scriptname</span><br></pre></td></tr></table></figure>

<p>其中scriptname为打包的文件或一个.spec-file</p>
<p><strong>常用语句形式</strong></p>
<ul>
<li><p>有界面的一般形式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyinstaller -Fw xxx.py -i aaa.ico</span><br></pre></td></tr></table></figure>
</li>
<li><p>无界面的一般形式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyinstaller -F xxx.py -i aaa.ico</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="常用可选参数"><a href="#常用可选参数" class="headerlink" title="常用可选参数"></a>常用可选参数</h3><p><strong>简略命令</strong>：</p>
<table>
<thead>
<tr>
<th>可选参数</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>-F</td>
<td>打包为一个文件</td>
</tr>
<tr>
<td>-D</td>
<td>一个目录，包含exe，依赖多</td>
</tr>
<tr>
<td>-c</td>
<td>使用控制台</td>
</tr>
<tr>
<td>-w</td>
<td>无控制台，使用窗口</td>
</tr>
<tr>
<td>-i</td>
<td>加.ico图标</td>
</tr>
<tr>
<td>–version-file</td>
<td>添加版本信息</td>
</tr>
</tbody></table>
<p><strong>详细命令</strong>：</p>
<table>
<thead>
<tr>
<th>可选参数</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>-D, –onedir</td>
<td>创建一个目录，包含exe文件，但会依赖很多文件（默认选项）</td>
</tr>
<tr>
<td>-F, –onefile</td>
<td>打包为一个exe</td>
</tr>
<tr>
<td>–specpath DIR</td>
<td>指定生成.spec-file的目录，默认是当前目录</td>
</tr>
<tr>
<td>-n NAME, –name NAME</td>
<td>指定打包应用和.spec-file的名字，默认是第一个脚本的文件名</td>
</tr>
<tr>
<td>-i &lt;FILE.ico&gt;, –icon &lt;FILE.ico&gt;</td>
<td>添加图标（可选实际很多类型&lt;FILE.ico or FILE.exe,ID or FILE.icns or “NONE”&gt;)</td>
</tr>
<tr>
<td>–version-file FILE</td>
<td>从version-file为exe增加版本信息</td>
</tr>
<tr>
<td>-c, –console, –nowindowed</td>
<td>使用控制台，无窗口（默认）。在Windows中第一个脚本是.pyw文件，此项无效。</td>
</tr>
<tr>
<td>-w, –windowed, –noconsole</td>
<td>使用窗口，无控制台。Windows第一脚本是.pyw自动启用。在*NIX系统此项忽略。</td>
</tr>
</tbody></table>
<p>pyinstaller更多详细命令可参考命令<code>pyinstaller --help</code>的输出结果。</p>
<h2 id="增加版本信息"><a href="#增加版本信息" class="headerlink" title="增加版本信息"></a>增加版本信息</h2><p>版本信息增加两步走：</p>
<ol>
<li>使用 pyi-grab_version 获取版本信息的模板文件。</li>
<li>使用 pyi-set_version 为打包好的程序附加版本信息。</li>
</ol>
<h3 id="获取版本信息模板文件"><a href="#获取版本信息模板文件" class="headerlink" title="获取版本信息模板文件"></a>获取版本信息模板文件</h3><p>pyi-grab_version对已有版本信息的exe(如Chrome、微信、QQ等等)只要有就成。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyi-grab_version [-h] exe-file [out-filename]</span><br></pre></td></tr></table></figure>

<p>示例如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyi-grab_version <span class="string">&quot;C:\Program Files\Nutstore\Nutstore.exe&quot;</span> version-info.txt</span><br></pre></td></tr></table></figure>

<p>version-info.txt就是获取的版本信息模板，我们可以对它进行编辑，修改成我们想给打包的程序设定的信息。</p>
<h3 id="设置版本信息"><a href="#设置版本信息" class="headerlink" title="设置版本信息"></a>设置版本信息</h3><p>有两种方式</p>
<ul>
<li><p>在打包时加入版本信息</p>
<p>加入选项 –version-file version-file</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyinstaller -Fw --version-file version-file py-file</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyinstaller -Fw --version-file version-info.txt xxx.py</span><br></pre></td></tr></table></figure>
</li>
<li><p>另外添加版本信息</p>
<p>使用pyi-set_version为已打包好的exe文件添加或修改版本信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyi-set_version version-file exe-file</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyi-set_version version-info.txt xxx.exe</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="附加资源文件"><a href="#附加资源文件" class="headerlink" title="附加资源文件"></a>附加资源文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#生成资源文件目录访问路径</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">resource_path</span>(<span class="params">r_path</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">getattr</span>(sys, <span class="string">&#x27;frozen&#x27;</span>, <span class="literal">False</span>): <span class="comment">#是否Bundle Resource</span></span><br><span class="line">        base_path = sys._MEIPASS</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        base_path = os.path.abspath(<span class="string">&quot;.&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> os.path.join(base_path, r_path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">root, startno=<span class="number">0</span>, endno=<span class="number">537</span></span>):</span><br><span class="line">    <span class="comment"># 其他使用资源文件的地方</span></span><br><span class="line">    file_n = resource_path(os.path.join(<span class="string">&quot;res&quot;</span>,<span class="string">&#x27;dataset_registry.csv&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>修改.spec文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">datas=[(<span class="string">&#x27;res&#x27;</span>,<span class="string">&#x27;res&#x27;</span>)],</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
